from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import time
import csv
import random
from datetime import datetime

class FullWildberriesParser:
    def __init__(self):
        self.setup_driver()
        self.wait = WebDriverWait(self.driver, 15)
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Chrome driver –≤ headless-—Ä–µ–∂–∏–º–µ"""
        chrome_options = Options()
        
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    def human_like_delay(self):
        """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞"""
        time.sleep(random.uniform(1, 2))
    
    def search_products(self, query):
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫: '{query}'")
        
        try:
            encoded_query = query.replace(' ', '%20')
            url = f"https://www.wildberries.ru/catalog/0/search.aspx?search={encoded_query}"
            
            print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            self.driver.get(url)
            
            self.wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            self.human_like_delay()
            
            total_products = self.scroll_page()
            
            products = self.parse_product_cards(total_products)
            
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return []
    
    def scroll_page(self):
        """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ö"""
        print("üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
        
        last_height = self.driver.execute_script("return document.body.scrollHeight")
        scroll_attempts = 0
        max_attempts = 10
        last_product_count = 0
        same_count_attempts = 0
        
        while scroll_attempts < max_attempts:
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)
            
            current_products = self.count_visible_products()
            print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {current_products}")
            
            if current_products == last_product_count:
                same_count_attempts += 1
                if same_count_attempts >= 2:
                    print("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    break
            else:
                same_count_attempts = 0
            
            last_product_count = current_products
            
            new_height = self.driver.execute_script("return document.body.scrollHeight")
            if new_height == last_height:
                scroll_attempts += 1
            else:
                scroll_attempts = 0
            
            last_height = new_height
            scroll_attempts += 1
        
        print(f"üéØ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {last_product_count}")
        return last_product_count
    
    def count_visible_products(self):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        selectors = [
            "div.product-card",
            "[data-card]",
            ".card",
            ".j-card-item"
        ]
        
        for selector in selectors:
            try:
                cards = self.driver.find_elements(By.CSS_SELECTOR, selector)
                if cards:
                    return len(cards)
            except:
                continue
        return 0
    
    def parse_product_cards(self, expected_count):
        """–ü–∞—Ä—Å–∏–º –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        products = []
        
        try:
            selectors = [
                "div.product-card",
                "[data-card]",
                ".card",
                ".j-card-item"
            ]
            
            product_cards = []
            for selector in selectors:
                try:
                    cards = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if cards:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
                        product_cards = cards
                        break
                except:
                    continue
            
            if not product_cards:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
                return []
            
            print(f"üì¶ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –í–°–ï–• {len(product_cards)} —Ç–æ–≤–∞—Ä–æ–≤...")
            print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
            
            successful_parses = 0
            for i, card in enumerate(product_cards, 1):
                try:
                    if i % 10 == 0 or i == len(product_cards):
                        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(product_cards)} —Ç–æ–≤–∞—Ä–æ–≤...")
                    
                    product_data = self.parse_single_product(card)
                    if product_data:
                        products.append(product_data)
                        successful_parses += 1
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {i}: {e}")
                    continue
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {successful_parses}/{len(product_cards)}")
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return []
    
    def parse_single_product(self, card):
        """–ü–∞—Ä—Å–∏–º –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            product_data = {}
            
            product_data['name'] = self.get_product_name(card)
            
            product_data['brand'] = self.get_product_brand(card)
            
            product_data['price'] = self.get_product_price(card)
            
            product_data['link'] = self.get_product_link(card)
            
            product_data['rating'] = self.get_product_rating(card)
            
            product_data['reviews'] = self.get_product_reviews(card)
            
            product_data['parse_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            if (product_data['name'] and product_data['price'] and 
                product_data['name'] != "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" and
                product_data['price'] != "0"):
                return product_data
            else:
                return None
                
        except Exception as e:
            return None
    
    def get_product_name(self, card):
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        name_selectors = [
            ".product-card__name",
            ".goods-name",
            "[class*='name']",
            ".j-card-name",
            "span:first-child"
        ]
        
        for selector in name_selectors:
            try:
                name_elem = card.find_element(By.CSS_SELECTOR, selector)
                name = name_elem.text.strip()
                if name and len(name) > 3:
                    return name
            except:
                continue
        
        return "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    def get_product_brand(self, card):
        """–ü–æ–ª—É—á–∞–µ–º –±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞"""
        brand_selectors = [
            ".product-card__brand",
            ".brand-name",
            "[class*='brand']",
            ".j-card-brand"
        ]
        
        for selector in brand_selectors:
            try:
                brand_elem = card.find_element(By.CSS_SELECTOR, selector)
                brand = brand_elem.text.strip()
                if brand:
                    return brand
            except:
                continue
        
        return "–ë—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"
    
    def get_product_price(self, card):
        """–ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"""
        price_selectors = [
            ".price__lower-price",
            ".final-cost",
            "[class*='price']",
            ".j-card-price",
            "ins"
        ]
        
        for selector in price_selectors:
            try:
                price_elem = card.find_element(By.CSS_SELECTOR, selector)
                price_text = price_elem.text.strip()
                price = ''.join(filter(lambda x: x.isdigit(), price_text))
                if price:
                    return price
            except:
                continue
        
        return "0"
    
    def get_product_link(self, card):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä"""
        try:
            link_elem = card.find_element(By.TAG_NAME, "a")
            link = link_elem.get_attribute("href")
            
            if link and "wildberries.ru" in link:
                return link
            else:
                if link and link.startswith("/"):
                    return "https://www.wildberries.ru" + link
                
        except:
            pass
        
        return "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    def get_product_rating(self, card):
        """–ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞"""
        rating_selectors = [
            ".product-card__rating",
            ".address-rate-mini",
            "[class*='rating']",
            ".j-card-rating"
        ]
        
        for selector in rating_selectors:
            try:
                rating_elem = card.find_element(By.CSS_SELECTOR, selector)
                rating = rating_elem.text.strip()
                if rating:
                    return rating
            except:
                continue
        
        return "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
    
    def get_product_reviews(self, card):
        """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"""
        review_selectors = [
            ".product-card__count",
            ".goods-comments",
            "[class*='review']",
            "[class*='feedback']",
            ".j-card-feedback"
        ]
        
        for selector in review_selectors:
            try:
                review_elem = card.find_element(By.CSS_SELECTOR, selector)
                reviews = review_elem.text.strip()
                if reviews:
                    return reviews
            except:
                continue
        
        return "0"
    
    def save_to_csv(self, products, query):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª"""
        if not products:
            print("üòû –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False
        
        filename = f"wildberries_all_products_{query}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        try:
            with open(filename, 'w', newline='', encoding='utf-8-sig') as file:
                fieldnames = ['brand', 'name', 'price', 'rating', 'reviews', 'link', 'parse_date']
                writer = csv.DictWriter(file, fieldnames=fieldnames)
                writer.writeheader()
                
                for product in products:
                    writer.writerow(product)
            
            print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            print(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def display_results(self, products, query):
        """–í—ã–≤–æ–¥–∏–º –í–°–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å"""
        if not products:
            print("üòû –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ó–ê–ü–†–û–°–£: '{query}'")
        print(f"üìä –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û –¢–û–í–ê–†–û–í: {len(products)}")
        print("=" * 100)
        
        for i, product in enumerate(products, 1):
            print(f"\nüì¶ –¢–û–í–ê–† {i}:")
            print(f"   üè∑Ô∏è  –ë–†–ï–ù–î: {product['brand']}")
            print(f"   üìã –ù–ê–ó–í–ê–ù–ò–ï: {product['name']}")
            print(f"   üí∞ –¶–ï–ù–ê: {product['price']} —Ä—É–±.")
            print(f"   ‚≠ê –†–ï–ô–¢–ò–ù–ì: {product['rating']}")
            print(f"   üí¨ –û–¢–ó–´–í–´: {product['reviews']}")
            print(f"   üîó –°–°–´–õ–ö–ê: {product['link']}")
            print("-" * 100)
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            self.driver.quit()
            print("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

def main():
    print("üöÄ SELENIUM –ü–ê–†–°–ï–† WILDBERRIES (–í–°–ï –¢–û–í–ê–†–´)")
    print("=" * 60)
    
    parser = FullWildberriesParser()
    
    try:
        query = input("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
        if not query:
            query = "—á–µ—Ö–æ–ª –¥–ª—è iphone"
        
        print(f"\nüéØ –ü–æ–∏—Å–∫: '{query}'")
        print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤...")


        start_time = time.time()
        products = parser.search_products(query)
        end_time = time.time()
        
        if products:
            print(f"\n‚úÖ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            parser.display_results(products, query)
            
            save_csv = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã –≤ CSV —Ñ–∞–π–ª? (y/n): ").strip().lower()
            if save_csv == 'y' or save_csv == '–¥':
                parser.save_to_csv(products, query)
                print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–∞–π–ª!")
            else:
                print("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            print("\nüòû –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            print("   ‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞")
            print("   ‚Ä¢ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    finally:
        parser.close()

if __name__ == "__main__":
    main()